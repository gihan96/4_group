10.4 포인터와 문자열
* 포인터를 이용한 문자열 선언방법
-> ex) char* p = "MOON" 이 있다 고 할 떄, 포인터 p의 각 주소 스택에 , p = 'M', p+1 = 'O', p+2 = 'O', p+3 = 'O', p+4 = '\0' 순으로 쌓인다. 

-> 예제 10 - 9. 포인터를 이용하여 문자열 출력하기
#include <stdio.h>

int main(void)
{
	char* pC = "C programing";
	printf("문자열을 변환 기호를 이용하여 출력\n");
	printf("%s\n", pC);

	printf("반복문을 이용해 한 글자씩 출력\n");
	while (*pC)
		printf("%c", *pC++);
	printf("\n");

	return 0;
} 
위의 예제를 보면 while(*pC)는 *(pC + 0)부터 *pC의 주소에 저장된 모든 값이 출력될 때 까지 만든다. 그 후  printf("%c", *pC++);를 통해 *pC + 0 부터 시작해서 다음 글자가 하나씩 출럭된다.
그래서 결과를 보면 위의 "문자열을 변환 기호를 이용하여 출력"과 마찬가지로 "C programing"이 출력된다.

* 배열 포인터 
-> 문자열을 동시에 여러개 만들어야 할 경우
ex). char* pStr[3] = {"english, "math", "korean"}이 있다고 가정할 때, 이 때 pStr[0] = 'e', pStr[1] = 'm', pStr[2] = 'k' 문자열 포인터로, 즉 각 문자열의 첫번째 주소를 가리킨다.
-> 이 때 불필요한 메모리 낭비를 막기위해 char* pStr[]처럼 배열의 크기를 초기에 지정하지 않아도 된다.
-> 만약 2차원 배열, 예를들어 char* Str[][8] = {"english", "math", "korean"} 식으로 문자열을 동시에 선언할 경우 문자가 가장 많은 "english"가 문자열의 기준이 되기 때문에, "math"나 "korean"의 경우 문자열의 크기가 적음에도 붏구하고,
"english"와 동일한 크기의 메모리를 가지기 때문에, 메모리의 낭비가 발생한다.

-> 예제 10 - 10. 포인터 배열을 이용하여 문자열 출력하기 프로그램
#include <stdio.h>

int main(void)
{
	char* pStr[] = { "english", "math", "korean" };
	char subject[][8] = { "english", "math", "korean" };
	int i;
	printf("포인터 배열을 이용하여 문자열을 출력합니다.\n");
	for (i = 0; i < 3; i++)
		printf("pStr[%d] = %s\n", i, pStr[i]);

	printf("2차원 배열을 이용해서 문자열을 출력합니다.\n");
	for (i = 0; i < 3; i++)
		printf("subject[%d] = %s\n", i, subject[i]);

	return 0;
}
-> 위의 예제와 같이 했을 경우 포인터 배열이나 2차원 배열 모두 같은 값이 출력된다. 그러나 위에서 언급 했던대로, 2차원 배열 subject[][8]을 사용할 경우 메모리의 낭비가 발생하기 때문에 포인터 배열 *pStr을 주로 이용한다.

* 문자 처리 함수
-> 예제 10 - 11. 소문자를 대문자로 바꾸기
#include <stdio.h>

int main(void)
{
	char* pC = "c language";

	while (*pC)
	{
		printf("%c", *pC - 32);
		pC++;
	}
	printf("\n");
	return 0;
}
-> 위의 예제와 같이 실행하면 "c language"가 "CLANGUAGE"로 바뀌는 것을 알 수 있다.
-> 그런데 여기서 보면 "C LANGUAGE"가 출력되야 하는데 "CLANGUAGE"가 출력되는 것은 *(Pc + 1)에 있는 공백문자(' ')또한 변환하지 않고 건너 뛰었기 때문에다. 
-> 만약 공백문자까지 포함해서 출력하고 싶을 때 
#include <stdio.h>

int main(void)
{
    char* pC = "c language";

    while (*pC)
    {
        if (*pC != ' ') {
            printf("%c", *pC - 32);
        } else {
            printf(" ");
        }
        pC++;
    }
    printf("\n");
    return 0;
}
위의 코드와 같이 작성하면 "C LANGUAGE"가 출력된다.

-> 위와 같이 문자의 크기를 변경하는 것은 소문자의 아스키코드에서 32를 빼도 되지만 ctype.h이라는 헤더 파일에 있는 함수들을 이용해서 만들 수 있다.
-> 문자를 처리하는 함수는 다음과 같다.
  1). toupper(char) : 무조건 영문 대문자로 변환한다.
  2). tolower(char) : 무조건 영문 소문자로 변환한다.
  3). _toupper(char) : 영문 소문자를 대문자로 변환한다.
  4). _tolower(char) : 영문 대문자를 소문자로 변환한다.

-> 예제 10-12. 문자 처리 함수 이용하기
#include <stdio.h>
#include <ctype.h>

int main(void)
{
	char* pC = "c language";

	while (*pC)
	{
		printf("%c", toupper(*pC++));
	}

	printf("\n");
	return 0;
}
-> 위의 예제와 같이 할 때 "c language"가 "C LANGUAGE"로 출력되는 것을 알 수 있다.

* 문자열 처리함수

-> 문자가 아닌 문자열을 처리할 때 string.h이라는 헤더 파일에 있는 함수를 이용하여 처리할 있다.
-> 문자열을 처리하는 함수는 다음과 같다.
  1). size_t strlen(const char*) : 문자열의 크기를 알아낸다.
  2). int strcmp(const char* s1, const char* c2) : 문자열 c1과 c2의 크기를 비교한다.
  3). char* strcpy(char* s1, const char* s2) : 문자열 s1에 문자열 s2를 복사한다.
  4). char* strcat(char* s1, const char* s2) : 문자열 s1에 문자열 s2을 연결한다.

11. 구조체와 열거형

11- 1. 구조체의 정의와 변수선언
*구조체의 정의
-> 구조체란 서로 다른 자료형을 하나의 자료로 구조화한 자료형이다. 
-> 구조체의 키워드는 struct를 사용하여 정의한다.
-> struct 안의 각 구성 요소는 멤버라 부르며 중괄호({ }) 안에 정의한다.
-> 마지막 중괄호( }) 다음에 반드시 세미콜론(;)을 넣어야 한다.

-> 구조체의 예).
struct book {
	char title[40];
	char author[40];
	char press[40];
	int page;
	int price;
};
-> 위에서 보듯이 title, author, press는 문자형 자료형 char를 page, price는 정수형 변수 int 이 두개를 사용해 정의할 수 있다.

* 구조체 변수의 선언 
-> 구조체를 사용하려면 구조체의 변수를 선언해야 한다.
-> 우선 
struct students {
	char name[20];
	char adress[30];
	char tel[15];
	int grade;
	int age;
};
라는 구조체를 선언 한 후 
int main()
{
   struct students st1;
   struct students st2;

   return 0;
}
로 main 함수에 students 구조체를 선언할 수 있다.

-> 이 때 students의 구조체 변수의 메모리 구조는 다음과 같다.
: name(20) + address(30) + tel(15) + grade(4) + age(4) = 73바이트의 메모리 크기를 가지고 있다.

예제 11 - 1. 구조체의 메모리 크기 확인하기
#include <stdio.h>

struct list {
	char name;
	char gender;
	int age;
};

int main(void)
{
	struct list st1 = { 'T', 'M', 25 };
	printf("구조체 list의 크기는 %d이다.\n", sizeof(struct list));
	printf("구조체 객체 st1의 크기는 %d이다.\n", sizeof(st1));

	return 0;
}
-> 위와 같은 예시로 하면 name(1) + gender(1) + age(4) = 6 바이트가 나올 것이다.
-> 그러나 실제로 출력하면 8바이트로 출력되서 나오는데, 그것은 char형 문자 배열의 경우 문자 뒤에 '\0'이 포함되어서 나온다. 그렇기 때문에 char형 문자열 변수의 크기는 문자의 크기 + 1의 크기가 된다.
-> 즉 name과 gender의 경우 각각의 문자가 1개가 있으므로 name + gender + age = (1+1)+(1+1)+4 = 2 + 2 + 4 = 8이 출력된다.

-> 구조체를 정의하면서 변수를 선언하는 방법은 다음과 같이 두 가지가 있다.
 1). 
struct students {
	char name[20];
	char address[30];
	char tel[15];
	int grade;
	int age;
} st1, st2;
-> 위와 같이 구조체를 정의함과 동시에 변수를 선언한다.

2). 
struct{
	char name[20];
	char address[30];
	char tel[15];
	int grade;
	int age;
} st1;

struct{
	char name[20];
	char address[30];
	char tel[15];
	int grade;
	int age;
} st2;
-> 위와 같이 구조체 명을 기록하지 않을 경우 변수를 선언 할 때 마다 구조체의 정의 부분을 다시 작성해야 한다.

11 - 2. 구조체의 접근과 선언
-> 구조체도 일반 변수와 마찬가지로 선언과 초기화를 해야한다. 이 때 구조체를 초기화 하는 방법으로는 2가지가 있다.
1).
struct students{
	char name[20];
	char address[30];
	int age;
};
struct students st1 = {"Moon", "Seoul", 28};

2). 
struct students{
	char name[20];
	char address[30];
	int age;
} st1 = {"Moon", "Seoul", 28};

-> 이렇게 선언 및 초기화한 구조체의 맴버 변수에 접근하려면 도트(.) 연산자를 사용해야 하는데, 그 형식은 다음과 같다.
-> 구조체_변수명.맴버명
st1.name
st1.address
st1.age

-> 예제 11 - 2 도트 연산자를 이용하여 구조체 접근하기
#include <stdio.h>

struct list {
	char name;
	char gender;
	int age;
};

int main(void)
{
	struct list st1, st2;
	st1.name = 'T';
	st1.gender = 'M';
	st1.age = 25;

	st2.name = 'S';
	st2.gender = 'F';
	st2.age = 28;

	printf("이름  성별  나이\n");
	printf("-------------------\n");
	printf(" %c %c %d\n", st1.name, st1.gender, st1.age);
	printf(" %c %c %d\n", st2.name, st2.gender, st2.age);

	return 0;
}
-> 위의 내용에서 보았듯이 st1.name은 list구조체 st1이 list의 맴버 name을 가리키고, st1.gender는 list구조체 st1이 list의 맴버 gender를 가리키고, st1.age는 list구조체 st1이 list의 맴버 age를 가리킨다.
-> st2또한 마찬가지고 구조체 list의 각 맴버들을 가리키므로 위의 예제를 출력할 경우 각 구조체 변수의 맴버 name, gender, age 순으로 출력되는 것을 알 수있다.

-> 구조체 로 선언한 객체도 일반 변수와 마찬가지로 할당 연산자를 이용하여 값을 저장할 수 있다.
-> 예제 11 - 3. 구조체에서 할당 연산자 활용하기
#include <stdio.h>

struct list {
	char name;
	char gender;
	int age;
};

int main(void)
{
	struct list st1 = { 'T', 'M', 25 };
	struct list st2, st3 = { 'P', 'F', 30 };

	st2 = st1;
	st3.name = st1.name;
	st3.gender = st1.gender;

	printf(" 이름 성별 나이\n");
	printf("------------\n");
	printf("st1 %c %c %d\n", st1.name, st1.gender, st1.age);
	printf("st2 %c %c %d\n", st2.name, st2.gender, st2.age);
	printf("st3 %c %c %d\n", st3.name, st3.gender, st3.age);
	return 0;
}
-> 위의 예제를 보면 우선 구조체 list의 변수 st1에는 name = 'T', gender = 'M', age = 25를 선언했다. 그리고 st2와 st3에는  name = 'P', gender = 'F', age = 30을 선언했다.
-> 그리고 st2 = st1은 구조체 st2는 구조체 st1의 맴버 변수를 가져와 사용한다는 것을 의미하고, st3.name = st1.name와 st3.gender = st1.gender는 st3의 name과 gender는 st1의 name과 gender를 사용한다는 것을 의미한다.
-> 따라서 출력시 st2는 st1과 마찬가지로 'T' 'M' 25가 출력되고 st3의 경우는 'T' 'M' 30이 출력된다는 것을 알 수 있다.

11 - 3. 구조체의 재정의 
-> 어떤 구조체 list를 선언하고 이를 main()함수에서 사용하고자 할 때 struct list st1이라고 지정하는데, 매번 이런식으로 지정하면 코드의 길이가 길어지면서 불편해 질 수 있다.
-> 이때 사용하는 것이 typedef로 구조체의 자료형을 재정의하는 키워드가 있다.

-> 예제 11 - 4. 구조체 재정의로 구조체 사용하기
#include <stdio.h>

struct students {
	char name[20];
	char address[30];
	int age;
};

typedef struct students student;

int main(void)
{
	student st1 = { "Moon", "Seoul", 25 };
	struct students st2 = { "John", "London", 30 };

	printf("학생 1은 성이 %s이고 %s에 살며 %d살이다.\n", st1.name, st1.address, st1.age);
	printf("학생 2는 성이 %s이고 %s에 살며 %d살이다.\n", st2.name, st2.address, st2.age);
	return 0;

}
-> 위의 예제와 같이 typdef를 선언한 student를 사용한 st1이나 원래 있던 구조체 students를 사용한 st2 이 두 개의 구조체 모두 출력할 때는 구조체 students의 맴버 변수를 출력한다는 것을 알 수 있다.

-> typedef를 이용해 구조체를 정의할 때는 다음과 같이 재정의도 할 수 있다.
typedef struct{
    char name[20];
    char address[30];
    int age;
} student;
-> 이 때 재정의한 구조체의 객체를 선언하는 방법은 다음과 같다.
-> student st1 = {"Moon", "Seoul", 25};

-> 3차원 좌표로 표현하여 문제를 해결하는 방법은 수학이나 공학에서 자주 사용하는데, 구조체를 이용하면 3차원 좌표를 계산하는 프로그램을 만들 수 있다. 
-> 우선 구조체를 이용하여 3차원 좌표를 표시하면 다음과 같이 정의할 수 있다.
struct ThreeDime {
	double x;
	double y;
	double z;
};
-> 그 다음 3차원상에서 점 A1(x1, y1, z1)과 원점의 거리 D는 다음과 같다.
-> D = ROOT(x1^2 + y1^2 + z1^2)

-> 점 A1(x1, y1, z1)과 점 A2(x2, y2, z2)사이의 거리 D는 다음과 같다.
-> D = ROOT((x1-x2)^2 + (y1 - y2)^2 + (z1 - z2)^2)

-> 여기서 ROOT의 기능을 수행하는 함수는 sqrt()인데, 이 함수는 math.h라는 헤더파일에 정의되어 있다.

-> 예제 11 - 5. 구조체를 이용하여 3차원 계산하기.
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h>
struct ThreeDime {
	double x;
	double y;
	double z;
};
typedef struct ThreeDime ThreeDime;
int main(void)
{
	double D1, D2;
	ThreeDime A1, A2;

	printf("3차원 점 A1의 x, y, z 좌표를 입력하시오.\n");
	scanf("%lf %lf %lf", &A1.x, &A1.y, &A1.z);


	printf("\n3차원 점 A2의 x, y, z 좌표를 입력하시오.\n");
	scanf("%lf %lf %lf", &A2.x, &A2.y, &A2.z);

	D1 = sqrt(A1.x * A1.x + A1.y * A1.y + A1.z * A1.z);

	D2 = sqrt((A1.x - A2.x) * (A1.x - A2.x) + (A1.y - A2.y) * (A1.y - A2.y) + (A1.z - A2.z) * (A1.z - A2.z));

	printf("\n점 A1과 원점의 거리는 %.2lf이다\n", D1);
	printf("점 A1과 점 A2의 거리는 %.2lf이다.\n", D2);

	return 0;

}
-> 위의 예제를 보면 만약 점 A1의 좌표에 4, 1, 5를 대입하고, 점 A2의 좌표에 3, 8, 2를 대입할 경우 D1 = 6.48, D2 = 7.68 순으로 출력되어진다.

11 - 4. 구조체의 사용

* 포인터를 이용한 구조체 사용
-> 일반변수 형태로 정의한 구조체의 맴버 변수에 접근하기 위해서는 도트(.)연산자를 사용한다.
-> 만약 구조체 포인터를 이용하여 포인터 변수 형태로 정의한 구조체의 맴버 변수는 화살표(->)연산자를 이용하여 접근한다.
-> 그조체 포인터의 선언과 초기화 방법은 다음과 같다.
struct ThreeDime {
	double x;
	double y;
	double z;
};
typedef struct ThreeDime ThreeDime;
ThreeDime A1 = {3, 1, 8};
ThreeDime* pA1 = &A1
-> 여기서 보면 포인터 pA1은 일반 변수 A1의 주소값을 가리키고 있다. 따라서 pA1의 맴버 변수의 값을 출력했을 경우 A1의 맴버 변수의 값이 출력되는 것을 알 수 있을 것이다.

-> 구조체 포인터를 이용한 구조체 맴버 접근 형식과 사용의 예시는 다음과 같다.
구조체_포인터->맴버명
pA1->x;
pA1->y;
pA1->z;

-> 예제 11 - 6. 구조체 포인터를 이용하여 구조체 맴버 접근하기
#include <stdio.h>

struct ThreeDime {
	double x;
	double y;
	double z;
};

typedef struct ThreeDime ThreeDime;

int main(void)
{
	ThreeDime A1 = { 3, 1, 8 };

	ThreeDime* pA1 = &A1;

	printf("3차원 점 A1의 x : %.2lf, y : %.2lf, z : %.2lf이다\n", pA1->x, pA1->y, pA1->z);

	return 0;

}
-> 위의 예제를 구조체 포인터 PA1이 A1의 주소값을 가리킨다. 따라서 pA1의 맴버변수 x, y, z의 값은 A1의 x, y, z의 값 즉 3.00, 1.00, 8.00이 출력된다.

* 함수의 인자로 구조체 사용
-> 




