10.4 포인터와 문자열
* 포인터를 이용한 문자열 선언방법
-> ex) char* p = "MOON" 이 있다 고 할 떄, 포인터 p의 각 주소 스택에 , p = 'M', p+1 = 'O', p+2 = 'O', p+3 = 'O', p+4 = '\0' 순으로 쌓인다. 

-> 예제 10 - 9. 포인터를 이용하여 문자열 출력하기
#include <stdio.h>

int main(void)
{
	char* pC = "C programing";
	printf("문자열을 변환 기호를 이용하여 출력\n");
	printf("%s\n", pC);

	printf("반복문을 이용해 한 글자씩 출력\n");
	while (*pC)
		printf("%c", *pC++);
	printf("\n");

	return 0;
} 
위의 예제를 보면 while(*pC)는 *(pC + 0)부터 *pC의 주소에 저장된 모든 값이 출력될 때 까지 만든다. 그 후  printf("%c", *pC++);를 통해 *pC + 0 부터 시작해서 다음 글자가 하나씩 출럭된다.
그래서 결과를 보면 위의 "문자열을 변환 기호를 이용하여 출력"과 마찬가지로 "C programing"이 출력된다.

* 배열 포인터 
-> 문자열을 동시에 여러개 만들어야 할 경우
ex). char* pStr[3] = {"english, "math", "korean"}이 있다고 가정할 때, 이 때 pStr[0] = 'e', pStr[1] = 'm', pStr[2] = 'k' 문자열 포인터로, 즉 각 문자열의 첫번째 주소를 가리킨다.
-> 이 때 불필요한 메모리 낭비를 막기위해 char* pStr[]처럼 배열의 크기를 초기에 지정하지 않아도 된다.
-> 만약 2차원 배열, 예를들어 char* Str[][8] = {"english", "math", "korean"} 식으로 문자열을 동시에 선언할 경우 문자가 가장 많은 "english"가 문자열의 기준이 되기 때문에, "math"나 "korean"의 경우 문자열의 크기가 적음에도 붏구하고,
"english"와 동일한 크기의 메모리를 가지기 때문에, 메모리의 낭비가 발생한다.

-> 예제 10 - 10. 포인터 배열을 이용하여 문자열 출력하기 프로그램
#include <stdio.h>

int main(void)
{
	char* pStr[] = { "english", "math", "korean" };
	char subject[][8] = { "english", "math", "korean" };
	int i;
	printf("포인터 배열을 이용하여 문자열을 출력합니다.\n");
	for (i = 0; i < 3; i++)
		printf("pStr[%d] = %s\n", i, pStr[i]);

	printf("2차원 배열을 이용해서 문자열을 출력합니다.\n");
	for (i = 0; i < 3; i++)
		printf("subject[%d] = %s\n", i, subject[i]);

	return 0;
}
-> 위의 예제와 같이 했을 경우 포인터 배열이나 2차원 배열 모두 같은 값이 출력된다. 그러나 위에서 언급 했던대로, 2차원 배열 subject[][8]을 사용할 경우 메모리의 낭비가 발생하기 때문에 포인터 배열 *pStr을 주로 이용한다.

* 문자 처리 함수
-> 예제 10 - 11. 소문자를 대문자로 바꾸기
#include <stdio.h>

int main(void)
{
	char* pC = "c language";

	while (*pC)
	{
		printf("%c", *pC - 32);
		pC++;
	}
	printf("\n");
	return 0;
}
-> 위의 예제와 같이 실행하면 "c language"가 "CLANGUAGE"로 바뀌는 것을 알 수 있다.
-> 그런데 여기서 보면 "C LANGUAGE"가 출력되야 하는데 "CLANGUAGE"가 출력되는 것은 *(Pc + 1)에 있는 공백문자(' ')또한 변환하지 않고 건너 뛰었기 때문에다. 
-> 만약 공백문자까지 포함해서 출력하고 싶을 때 
#include <stdio.h>

int main(void)
{
    char* pC = "c language";

    while (*pC)
    {
        if (*pC != ' ') {
            printf("%c", *pC - 32);
        } else {
            printf(" ");
        }
        pC++;
    }
    printf("\n");
    return 0;
}
위의 코드와 같이 작성하면 "C LANGUAGE"가 출력된다.

-> 위와 같이 문자의 크기를 변경하는 것은 소문자의 아스키코드에서 32를 빼도 되지만 ctype.h이라는 헤더 파일에 있는 함수들을 이용해서 만들 수 있다.
-> 문자를 처리하는 함수는 다음과 같다.
  1). toupper(char) : 무조건 영문 대문자로 변환한다.
  2). tolower(char) : 무조건 영문 소문자로 변환한다.
  3). _toupper(char) : 영문 소문자를 대문자로 변환한다.
  4). _tolower(char) : 영문 대문자를 소문자로 변환한다.

-> 예제 10-12. 문자 처리 함수 이용하기
#include <stdio.h>
#include <ctype.h>

int main(void)
{
	char* pC = "c language";

	while (*pC)
	{
		printf("%c", toupper(*pC++));
	}

	printf("\n");
	return 0;
}
-> 위의 예제와 같이 할 때 "c language"가 "C LANGUAGE"로 출력되는 것을 알 수 있다.

-> 문자가 아닌 문자열을 처리할 때 string.h이라는 헤더 파일에 있는 함수를 이용하여 처리할 있다.
-> 문자열을 처리하는 함수는 다음과 같다.
  1). size_t strlen(const char*) : 문자열의 크기를 알아낸다.
  2). int strcmp(const char* s1, const char* c2) : 문자열 c1과 c2의 크기를 비교한다.
  3). char* strcpy(char* s1, const char* s2) : 문자열 s1에 문자열 s2를 복사한다.
  4). char* strcat(char* s1, const char* s2) : 문자열 s1에 문자열 s2을 연결한다.

11. 구조체와 열거형
11- 1. 구조체의 정의와 변수선언
-> 구조체란 서로 다른 자료형을 하나의 자료로 구조화한 자료형이다. 
-> 구조체의 키워드는 struct를 사용하여 정의한다.
-> struct 안의 각 구성 요소는 멤버라 부르며 중괄호({ }) 안에 정의한다.
-> 마지막 중괄호( }) 다음에 반드시 세미콜론(;)을 넣어야 한다.

-> 구조체의 예).
struct book {
	char title[40];
	char author[40];
	char press[40];
	int page;
	int price;
};
-> 위에서 보듯이 title, author, press는 문자형 자료형 char를 page, price는 정수형 변수 int 이 두개를 사용해 정의할 수 있다.

-> 구조체를 사용하려면 구조체의 변수를 선언해야 한다.
-> 우선 
struct students {
	char name[20];
	char adress[30];
	char tel[15];
	int grade;
	int age;
};
라는 구조체를 선언 한 후 
int main()
{
   struct students st1;
   struct students st2;

   return 0;
}
로 main 함수에 students 구조체를 선언할 수 있다.

-> 이 때 students의 구조체 변수의 메모리 구조는 다음과 같다.
: name(20) + address(30) + tel(15) + grade(4) + age(4) = 73바이트의 메모리 크기를 가지고 있다.

예제 11 - 1. 구조체의 메모리 크기 확인하기
#include <stdio.h>

struct list {
	char name;
	char gender;
	int age;
};

int main(void)
{
	struct list st1 = { 'T', 'M', 25 };
	printf("구조체 list의 크기는 %d이다.\n", sizeof(struct list));
	printf("구조체 객체 st1의 크기는 %d이다.\n", sizeof(st1));

	return 0;
}
-> 위와 같은 예시로 하면 name(1) + gender(1) + age(4) = 6 바이트가 나올 것이다.
-> 그러나 실제로 출력하면 8바이트로 출력되서 나오는데, 그것은 char형 문자 배열의 경우 문자 뒤에 '\0'이 포함되어서 나온다. 그렇기 때문에 char형 문자열 변수의 크기는 문자의 크기 + 1의 크기가 된다.
-> 즉 name과 gender의 경우 각각의 문자가 1개가 있으므로 name + gender + age = (1+1)+(1+1)+4 = 2 + 2 + 4 = 8이 출력된다.


