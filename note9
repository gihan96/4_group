12. 파일처리와 메크로
12-01. 파일 입출력
* 파일입출력
->기본적으로 파일에 데이터를 입출력하려면 파일을 열고(open), 처리하고(write/read), 닫으면(close) 됨.
-> 파일 관련 함수는 헤더파일인 stdio.h 파일에 들어 있음.

* fopen()함수의 형식
-> fopen(const char*(1), const char*(2))
-> const char*(1) : 파일명(경로를 포함. 단, 파일이 소스코드와 동일한 폴더에 있으면 경로를 표시하지 않고 파일명만 기록)
-> const char*(2) : 파일 모드(쓰기, 읽기 등을 결정)
-> 반환형 : FILE 포인터

*사용 예
-> FILE *fp;
fp = fopen("input.txt","r");
-> 파일이 제대로 열리면 fp에 파일을 가리키는 주소 값이 저장되고 파일이 제대로 열리지 않으면 NULL이 저장
-> NULL이 아닐경우 필요한 조치를 취해야 한다.

* 파일 모드의 종류
-> 텍스트 파일: 파일의 내용을 읽거나 기럭할 때 텍스트 파일처럼 1바이트 단위로 처리하고 아스키코드 값을 통해 화면에 문자로 나타난다

-> 이진파일: 파일의 내용을 읽거나 기록할 때 텍스트파일처럼 1바이트 단위로 처리하지 않고 가변적으로 처리한다.
            .exe파일이나 텍스트 파일을 열 경우 알수 없는 글자로 깨져서 나오는 것을 알 수 있다.
 
*fclose()함수의 형식
->시작: FILE *fp;
->종료: fclose(fp);
-> 파일을 성공적으로 닫으면 0을, 그렇지 않으면 EOF(Error Of File)를 반환
-> 파일을 닫으면 파일 입출력에 사용했던 메모리 공간을 비움.
-> 파일의 주소값을 지정하기 위해 FILE *fp형식을 취했는데, 종료할 때는 fclose()안에 *fp가 아닌 fp인 이유는?

*파일 입출력 함수
 
11-02. 파일 입출력 함수

*fgetc()함수의 형식
-> char fgetc(FILE*)
-> FILE* : FILE 포인터
▪ 반환형 : 파일에서 읽어온 문자가 저장되는 문자형

*사용 예
-> FILE *fp;
   char ch;
   ch = fgetc(fp);

*fputc()함수의 형식
-> fputc(char, FILE*)
-> char : 파일에 기록할 문자
▪ FILE* : FILE 포인터

* 사용 예
FILE *fp
char ch = 'a';
fputc(ch, fp);

* 예제 12 - 1. 문자를 파일에 출력하기
1. file open ...txt
2. 한 문자 getchar()
3. 메모리상에서 읽어온 글자를 fput(char, FILE*)
3.1. 'q'-> 프로그램 종료.

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

int main(void)
{
	FILE* fp;
	char ch;

	if ((fp = fopen("basic.txt", "w")) == NULL)
	{
		printf("파일이 열리지 않습니다.\n");
		exit(1);
	}

	printf("문자 하나를 입력하세여\n");
	ch = getchar();

	while (ch != 'q')
	{
		fputc(ch, fp);
		ch = getchar();
	}

	printf("파일 입력이 종료되었습니다.\n");
	return 0;
}
-> stdlib.h: C언어의 표준 라이브러리로, 문자열 변환, 의사난수 생성, 동적메모리 관리 등의 함수들을 포함한다.
-> exit(1): stdlib.h 헤더파일에 포함된 함수로 프로그램의 종료를 나타내는 함수이다. exit(0)은 성공적으로 프로그램이 종료됨, exit(1)은 정상적이지 않는 상태를 종료시킬 때 사용한다.

*fgets()함수의 형식
-> char* fgets(char*, int, FILE*);
-> char*: 파일에서 읽어올 문자열이 저장된 배열을 가리키는 포인터
-> int: 읽어올 문자열의 크기(읽어올 문자 수)
-> FILE*: FILE 포인터(파일의 시작 주소)

*사용 예 
FILE *fp;
.
.
.
char line[50];
fgets(line,50,fp);

*fputs()함수의 형식
-> char* fputs(char*, FILE*);
-> char* : 파일에 저장할 문자 배열을 가리키는 포인터
-> FILE* : FILE 포인터


* 예제 12- 2. 행을 파일에 출력하기
1. fp1을 복사한 내용을 fp2파일에 옮기기 위해서는 fp1파일을 메모리 상에 올려놓는다.
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#define LINE 30

int main(void)
{
	FILE* fp1, *fp2;
	char line[LINE];

	fp1 = fopen("lineinput.txt", "r");
	if (fp1 == NULL)
	{
		printf("파일을 열 수 없습니다.\n");
		exit(1);
	}

	fp2 = fopen("linetarget.txt", "w");

	while (fgets(line, LINE, fp1) != NULL)
		fputs(line, fp2);

	printf("파일 입력이 종료되었습니다.\n");

	fclose(fp1);
	fclose(fp2);
	return 0;
}

* fread()와 fwrite()함수의 형식
-> 함수명(void* 포인터, 바이트 크기, 블록 수, FILE* 포인터);
-> void* 포인터 : 파일에서 읽어올(또는 파일에 기록할) 자료를 가리키는 포인터
-> 바이트 크기: 읽어올(또는 기록할) 자료형의 바이트 크기
-> 블록 수 : 읽어올(또는 기록할) 블록의 수(반복 횟수)
-> FILE* 포인터 : FILE 포인터
-> 반환 값 : 함수가 오류 없이 정상적으로 실행되면 블록 수를 반환

→ fread( )와 fwrite( )는 블록 단위로 입출력
자료형의 바이트 크기 * 블록 수 만큼 파일에서 데이터를 읽어오거나 기록

* 사용 예
-> fread(&a, sizeof(int), 4, fp);
-> fwirte(&b, sizeof(b), 1, fp);

* 예제 12-3 fwrite()함수 사용하기
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

int main(void)
{
	FILE* fp;
	int n = 4000;
	if ((fp = fopen("basic.txt", "wb")) == NULL)
	{
		printf("파일을 열 수 없습니다.\n");
		exit(1);
	}

	fwrite(&n, sizeof(int), 1, fp);
	fclose(fp);

	return 0;
}


* fprintf()함수의 형식
-> fprintf(FILE* 포인터, 변환기호, 변수 목록);
-> FILE* 포인터 : FILE 포인터
-> 변환기호: printf( ) 함수에서 사용한 변환기호
-> 변수 목록: 파일에 저장할 내용을 담고 있는 변수들
-> 반환 값 : 함수가 정상적으로 실행되면 파일에 저장한 데이터 크기(바이트) 반환

* 사용 예
->fprintf(fp, "%s %s %d\n", name, address, age);

-> 파일 포인터를 제외하면 printf()함수와 사용 형식은 같다.

* fscanf()함수의 형식
-> fscanf(FILE* 포인터, 변환기호, 변수 목록);
-> FILE* 포인터 : FILE 포인터
-> 변환기호 : scanf( ) 함수에서 사용한 변환기호
-> 변수 목록 : 파일에서 읽어온 자료가 저장될 변수 또는 변수의 주소
-> 반환 값 : 함수가 정상적으로 실행되면 파일에서 읽어들인 항목 수를 반환

* 사용 예
-> fscanf(fp, "%s %s %d\n", name, address, &age);
-> 파일 포인터를 제외하면 scanf( ) 함수와 사용 형식이 동일하다.

* 예제 12 - 4. fprintf()와 fscanf()함수 사용하기
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

struct students {
	char name[40];
	char address[40];
	int age;
};

typedef struct students student;

int main(void)
{
	FILE* fp1;

	student st1 = { "홍길동", "서울", 30 }, st2;

	if ((fp1 = fopen("basic.txt", "w")) == NULL)
	{
		printf("파일을 열 수 없습니다.\n");
		exit(1);
	}
	fprintf(fp1, "%s %s %d\n", st1.name, st1.address, st1.age);
	fclose(fp1);

	if ((fp1 = fopen("basic.txt", "r")) == NULL)
	{
		printf("파일을 열 수 없습니다.\n");
		exit(1);
	}

	fscanf(fp1, "%s %s %d\n", st2.name, st2.address, &st2.age);
	printf("이름 : %s  거주지 : %s 나이 : %d\n", st2.name, st2.address, st2.age);
	fclose(fp1);
	return 0;
}

12 - 03. 파일 임의 접근

* 순차 접근(sequential access)
-> 파일의 처음이나 끝부터 데이터를 입출력하는 방식이다.

* 임의 접근(random access)
-> 임의의 위치에서부터 데이터를 입출력하는 방식이다.
-> 파일 위치 지시자를 이용하여 파일에 접근(헤더파일인 stdio.h 파일에 정의)

* 파일 위치 지시자
-> SEEK_STE: 값은 0으로 파일의 처음을 의미한다.
-> SEEK_CUR: 값은 1로 파일에서 현제위치를 의미한다.
-> SEEK_END: 값은 2로 파일의 끝을 의미한다.

* fseek()함수의 형식
-> int *fseek(FILE* fp, long offset, int origin);
-> FILE* fp: FILE 포인터
-> long offste: origin부터 새로운 위치까지 상대적으로 떨어진 거리(단위 : 바이트)
-> origin: 파일 위치 지시자
-> 반환 값 : 성공할 경우 0, 오류가 발생하면 0 이외의 값을 반환한다.
-> 이진 모드 파일에서만 위치를 제대로 찾아갈 수 있다.

* 사용 예
-> fseek(fp, 100L, SEEK_SET) : 파일의 처음 위치에서 100 바이트 이동한다.
-> fseek(fp, 100L, SEEK_CUR): 파일의 현재 위치에서 100바이트 이동한다.
-> fseek(fp, -100L, SEEK_END): 파일의 끝에서 100바이트 앞으로 이동한다.

* 예제 12 - 5. fseek함수 사용하기
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main(void)
{
	FILE* fp;
	char str[11];

	if ((fp = fopen("data.txt", "wb")) == NULL)
	{
		printf("파일을 열 수 없습니다.\n");
		exit(1);
	}

	fprintf(fp, "abcdefgjij");
	fclose(fp);

	if ((fp = fopen("data.txt", "rb")) == NULL)
	{
		printf("파일을 열 수 없습니다.\n");
		exit(1);
	}

	fgets(str, 11, fp);
	printf("str 문장 출력 : %s\n\n", str);

	fseek(fp, 4L, SEEK_SET);
	fgets(str, 3, fp);
	printf("5번쨰 부터 2글자 출력 : %s\n", str);

	fseek(fp, -3L, SEEK_CUR);
	fgets(str, 3, fp);
	printf("현 위치의 3글자 앞에서부터 2글자 출력 : %s\n", str);

	fseek(fp, -9L, SEEK_END);
	fgets(str, 5, fp);
	printf("맨 뒤에서 9글자 앞에서부터 4글자 출력 : %s\n", str);
	fclose(fp); 
	return 0;
}

*fgetpos()함수의 형식 
-> fgetpos(FILE* fp, fpos_t* pos);
-> FILE* fp: FILE 포인터
-> fpos_t* pos: 현재 파일 위치 지시자가 가리키는 위치를 저장하는 포인터
-> 반환 값 : 성공할 경우 0, 오류가 발생하면 0 이외의 값을 반환
-> 파일 내에서 파일 위치 지시자가 가리키는 현재 위치를 포인터 pos에 저장한다.

*fsetpos()함수의 형식 
-> fsetpos(FILE* fp, const fpos_t* pos);
-> FILE* fp: FILE 포인터
-> const fpos_t* pos: 이동하고자 하는 파일 위치 지시자의 새로운 위치
-> 반환 값 : 성공할 경우 0, 오류가 발생하면 0 이외의 값을 반환
-> fsetpos( ) 함수를 사용하려면 반드시 fgetpos( ) 함수를 통해 pos 값을 가지고있어야 한다.

* 예제 12 - 6. fgetpos()와 fsetpos()함수 사용하기
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main(void)
{
	FILE* fp;
	fpos_t pos;
	char str[20];
	if ((fp = fopen("example.c", "rb")) == NULL)
	{
		printf("파일이 열리지 않습니다.\n");
		exit(1);
	}
	fgetpos(fp, &pos);
	printf("pos = %ld\n", (long)pos);

	fread(str, sizeof(char), 20, fp);

	fgetpos(fp, &pos);

	printf("pos = %ld, str = %s\n", (long)pos, str);

	pos = 300;

	if (fsetpos(fp, &pos) != 0)
		printf("fsetpos 에러 발생\n");

	fread(str, sizeof(char), 20, fp);
	fgetpos(fp, &pos);

	printf("pos = %ld, str = %.30s\n", (long)pos, str);

	fclose(fp);
	return 0;
}

11 - 04. 메크로

*메크로(macro)
-> 프로그래밍할 떄 반복적으로 나타나는 상수나 함수를 명령 하나로 새롭게 정의 한 것을 말한다.

* 매크로 상수 형식 
-> #define 매크로명 대체할_값
-> 이 떄 대체할 값으로는 리스트명, 수, 문자열 등이 올 수 있다.

* 사용 예
-> #define PI 3.141592

* 예제 12 - 7. 매크로 사용하기
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define PI 3.14

int main(void)
{
	int R;
	float cir;

	printf("원의 반지름을 입력하세요 : ");
	scanf("%d", &R);

	cir = PI * (2 * R);
	printf("원의 둘레는 %.2f입니다.\n", cir);

	return 0;
}
-> 위의 예제와 같이 매크로 PI는 3.14로 고정되어 있다. 그래서 cir = PI * (2 * R);은 3.14 * (2 * R)로 나타날 수 있다.

* 매크로 함수 
-> 매크로는 상수뿐만 아니라 함수로도 사용할 수 있다.

* 매크로 함수 형식
-> #define 매크로 함수명(인자_1, 인자_2, .... ....) 함수_정의

* 사용 예
-> #define MAX(A,B) ((A) > (B) ? (A) : (B))
-> #define SQURE(X) ((X) * (X))

-> 매크로 함수를 사용할 때는 매크로 함수명 다음에 바로 괄호를 입력해야 한다. 
-> 만약 매크로 함수명과 괄호 사이에 공백이 있으면 매개변수를 가진 매크로 함수가 아닌 단순 매크로 상수로 인식하기 때문에 잘못된 결과가 나오기 때문이다.

* 예제 12 - 8. 매크로 함수 사용하기
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define PI 3.14
#define AREA(X) (PI * (X) * (X))

int main(void)
{
	float R;

	printf("원의 반지름을 입력하세요 : ");
	scanf("%f", &R);

	printf("원의 반지름은 %.2f입니다.\n", AREA(R));
	return 0;
}

-> 위의 예제에서 볼 수 있듯이 매크로 상수 PI는 3.14, 매크로 함수 AREA(X)는 (PI * (X) * (X))이다.
-> 그래서 AREA(R)의 값은 PI * R * R = 3.14 * R * R로 나타낼 수 있다.

* 13장 p.409. 간단한 영상처리 프로그램

* 동적 메모리 할당(malloc())
-> 런 타임시 동적으로 메모리를 잡아준다.
-> 사용 후 free()롤 메모리를 다 사용했다고 선언해야 한다.

* 만약 lena256.raw라는 파일이 있다고 가정할 때
-> lena256.raw 영상을 프로그램에 읽어오는 소스 및 과정은 다음과 같다.
#define SIZE 256 * 256
typedef unsigned char BYTE
FILE* fpIn;
fpIn = fopen("lena256.raw", "rb");
BYTE* pBufIn = (BYTE*)malloc(SIZE);
fread(pBufIn, 1, SIZE, fpIn);

1). define을 이용하여 영상의 크기를 정의한다.
2). typedef를 이용하여 unsigned char 자료형을 간단히 BYTE로 재정의 한다. 
3). fopen()함수를 이용하여 lena256.raw 파일의 데이터를 읽어오기 위해 연다.
4). 이 때 해당 파일이 텍스트가 아니기 때문에 fopen()함수의 두 번째 인자를 "r"이 아닌 "rb"를 사용해야 한다.

-> lena256.raw 영상을 처리한 파일을 만드는 소스는 다음과 같다.
FILE* fpOut = fopen("lenainvert256.raw","wb");
BYTE* pBufOut = (BTYE*)malloc(SIZE);
fwrite(pBufOut, 1, SIZE, fpOut);

-> 파일 닫기와 메모리 헤제 소스는 다음과 같다.
fclose(fpIn);
fclose(fpOut);
free(pBufIn);
free(pBufOut);
-> 모든 작업이 끝나면 fclose()함수로 파일을 닫아야 한다.
-> 그리고 malloc()함수를 이용하여 동적으로 메모리를 할당한 경우는 free()함수를 이용하여 할당된 메모리를 해제해야 한다.
-> 만약 fclose()함수를 사용하지 않아서 파일이 닫지 않은 상태 이거나, free()함수를 사용하지 않아 할당된 메모리가 해제되지 않을 경우 메모리 누수가 발생할 수 있다.

* 반전 영상 만들기
-> 반전 영상은 검은색은 흰색으로, 흰색을 검은색으로 바꾼 영상으로 회색의 경우 밝은 색은 어둡게, 어두운 색은 밝게 바꿔준다.
-> 반전 영상의 주요 소스는 다음과 같다.
int i, j;
BYTE* pBufOut = (BYTE*)malloc(SIZE);
for(i = 0; i < 256; i++)
{
    for(j = 0; j < 256; j++)
    {
      pBufOut[i * 256 + j] = 255 - pBufIn[i * 256 + j];
    }
}
1). 우선 malloc()함수를 이용해 반전 영상을 저장할 메모리를 확보한다.;
2). pBufIn과 pBufOut은 1차원 포인터로 1차원 배열의 시작 주소를 가리킨다.
3). pBufIn은 영상처리 전의 메모리르 pBufOut은 영상처리 후의 메모리를 가리키는 포인터다.
4). 반복문에서 isms 영상의 가로(너비)를 j는 영상의 세로(높이)를 나타낸다.
5). pBufIn[i * 256 + j]는 가로와 세로의 위치가 i와 j일 때 화소값을 나타난다.
6). pBufOut[i * 256 + j] = 255 - pBufIn[i * 256 + j];의 식은  pBufOut[i * 256 + j]의 화소 값은 화소의 최대값 255에서 pBufIn[i * 256 + j]의 화소값을 뺀 값과 같다는 의미가 된다.

* 예제 13 - 7. 반전 영상 만들기 프로그램.
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#define SIZE 256 * 256
typedef unsigned char BYTE;

void main()
{
	int i, j;
	FILE* fpIn, * fpOut;
	BYTE* pBufIn = (BYTE*)malloc(SIZE);
	BYTE* pBufOut = (BYTE*)malloc(SIZE);
	fpIn = fopen("lena256.raw", "rb");
	fpOut = fopen("lenainvert256.raw", "wb");
	fread(pBufIn, 1, SIZE, fpIn);

	for (i = 0; i < 256; i++)
	{
		for (j = 0; j < 256; j++)
		{
			pBufOut[i * 256 + j] = 255 - pBufIn[i * 256 + j];
		}
	}

	fwrite(pBufOut, 1, SIZE, fpOut);
	fclose(fpIn);
	fclose(fpOut);
	free(pBufIn);
	free(pBufOut);
}

* 이진 영상 만들기
-> 이진 영상은 검은색 또는 흰색으로만 구성된 영상으로 화소값은 0 또는 255를 말한다.
-> 이진 영상을 만드는 방법은 기준이 되는 값을 정하여 그 값 미만은 검은색(0)으로, 이상은 흰색(255)로 처리하는 방식으로 이진 영상을 만든다.

* 이진 영상의 주요 소스
for (i = 0; i < 256; i++)
{
	for (j = 0; j < 256; j++)
	{
		if(pBufIn[i * 256 + j] >= 128)
		   pBufOut[i * 256 + j] = 255;
		else
		   pBufOut[i * 256 + j] = 0;	
	} 
}
-> 위 소스에서는 흑백 영상의 화소 중간값인 128을 기준으로 정하여 128 이상인 화소는 흰색(255)으로, 128보다 작은 화소는 검은색(0)으로 처리했다.

* 예제 13 - 8. 이진 영상 만들기
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#define SIZE 256 * 256
typedef unsigned char BYTE;

void main()
{
	int i, j;
	FILE* fpIn, * fpOut;
	BYTE* pBufIn = (BYTE*)malloc(SIZE);
	BYTE* pBufOut = (BYTE*)malloc(SIZE);
	fpIn = fopen("lena256.raw", "rb");
	fpOut = fopen("lenainvert256.raw", "wb");
	fread(pBufIn, 1, SIZE, fpIn);

	for (i = 0; i < 256; i++)
	{
		for (j = 0; j < 256; j++)
		{
			if (pBufIn[i * 256 + j] >= 128)
				pBufOut[i * 256 + j] = 255;
			else
				pBufOut[i * 256 + j] = 0;
		}
	}

	fwrite(pBufOut, 1, SIZE, fpOut);
	fclose(fpIn);
	fclose(fpOut);
	free(pBufIn);
	free(pBufOut);
}

* p.381 연습문제 06
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

int main(void)
{
	FILE* fp;

	fp = fopen("basic.txt", "w");
	if (fp == NULL)
	{
		printf("파일을 열 수 없습니다.\n");
		exit(1);
	}

	int sum = 0;

	for (int i = 1; i <= 100; i++)
	{
		sum += i;
		fprintf(fp, "1 %d %d\n", i, sum);
	}

	fclose(fp);
	return 0;
}
