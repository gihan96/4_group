01. 함수의 개요
-> 함수: 하나의 특별한 목적의 작업을 수행하기 위해 독립적으로 설계된 프로그램 코드의 집합.
-> 함수의 장점
  1). 반복적으로 실행해야 할 내용을 함수로 만들어 필요할 때마다 호출해서 사용할 수 있다.
  2). 프로그램이 모듈화되므로 읽기 쉽고, 디버깅과 편집이 수월하다.
  3). 프로그램의 기능과 구조를 한눈에 알아볼 수 있다.
  4). 다른 프로그램에서 재사용할 수 있다.

-> 함수의 이름을 정할 때는 사용하고자 하는 이름이 한가지 역할에 맞게 잘 지어야 한다.
  예). 두 개의 변수를 더하는 함수를 만들 때 함수의 이름을 enjoy나 happy 등과 같이 함수의 목적과는 전혀 관련이 없는 이름을 지으면, 후에 해당 찾고자 하는 함수가 어떤 것 인지를 알 수 없게 된다.

02. 함수 사용하기
-> 시스템 라이브러리: 자주 사용하는 유용한 함수를 사용자가 바로 이용할 수 있게 C시스템에 미리 만들어 놓은 것을 말한다.
  예). prinf(), scanf(), while(), if()

-> 사용자 정의 함수: 사용자 자신이 원하는 기능을 직접 만든 함수를 말한다.

-> 함수의 정의 형태: 함수 앞에 쓰는 자료형과 함수앞의 자료형은 같아야 한다.
  예). int를 자료형으로 갖는 함수가 있으면, return에 쓰이는 반환값 또한 int이여야 한다.

-> 함수의 선언: 함수의 선언은 문장의 제일 위쪽에 선언을 해 주어야 한다.
예)
#include <stdio.h>
int SumTwo(int a, int b);
int main(void)
{
	int a, b, sum;
	a = 10;
	b = 20;

	sum = SumTwo(a, b);

	printf("%d", sum);
	return 0;
}

int SumTwo(int a, int b)
{
	int sum;

	sum = a + b;

	return sum;
}
위의 코드와 같이 두 개의 변수의 합을 구하는 SumTwo함수를 만들고자 하면 main함수 위에 해당 함수를 선언해 주어야 한다.

-> 예제8-2 실수 2개를 입력받아 평균 출력하기
#include <stdio.h>

float Average(float x, float y);
int main(void)
{
	float num1, num2, result;
	printf("실수 2개를 입력하세요 : ");
	scanf("%f %f", &num1, &num2);

	result = Average(num1, num2);
	printf("두 실수의 평균 : %f\n", result);

	return 0;
}

float Average(float x, float y)
{
	float z;
	z = (x + y) / 2;
	return z;
}

-> 함수의 유용성: 함수의 장점으로는 반복적으로 해야할 내용을 함수로 만들어 간결하게 할 수 있다.
  예). 1부터 10까지 더하는 결과와 10부터 20까지 더하는 결과를 출력하고자 할 때 for문을 이용할 경
#include <stdio.h>

int main(void)
{
	int i;
	int sum1 = 0;
	int sum2 = 0;
	for (i = 1; i <= 10; i++)
	{
		sum1 += i;
	}
	for (i = 10; i <= 20; i++)
	{
		sum2 += i;
	}

	printf("1부터 10까지의 합 : %d\n", sum1);
	printf("10부터 20까지의 합 : %d\n", sum2);
	return 0;
}
이런 식으로 나오게 된다. 만약 시작하는 수 부터 끝나는 수까지의 합을 계산하는 함수를 만들어 이용하면
#include <stdio.h>

int Integral(int start, int end);
int main(void)
{
	printf("1부터 10까지의 합 : %d\n", Integral(1, 10));
	printf("10부터 20까지의 합 : %d\n", Integral(10, 20));
	return 0;
}

int Integral(int start, int end)
{
	int sum = 0;

	for (int i = start; i <= end; i++)
	{
		sum += i;
	}
	return sum;
}
이런 식으로 보다 간결하게 만들 수 있다.

03. 함수와 배열
-> 함수는 일반 변수 뿐만 아니라 배열에서도 사용할 수 있다.
-> 예제 8-6. 배열을 인자로 사용하는 함수
#include <stdio.h>

int SumArray(int Arry[], int Size);
int main(void)
{
	int a[] = { 10, 5, 15, 25, 7 };
	int Sum;
	Sum = SumArray(a, 5);
	printf("배열 원소의 합 : %d\n", Sum);
	return 0;
}

int SumArray(int Arry[], int Size)
{
	int result = 0, i;
	for (i = 0; i < Size; i++)
		result += Arry[i];
	return result;
}
-> 이런 식으로 해서 함수 SumArray를 이용해 배열 a의 모든 원소의 합을 구할 수 있다.
-> 이때 main함수에 사용할때 SumArray(a, 5)에서 a는 SumArray()라는 함수에 배열 a[]의 주소값을 전달한다는 것을 의미한다.

04. 재귀함수
-> 재귀함수는 함수에서 같은 함수를 다시 호출한다는 것을 의미한다.
-> 예제 8-7 팩토리얼 구하기
#include <stdio.h>

int factorial(int n);
int main(void)
{
	int fact_num;
	fact_num = factorial(10);
	printf("10 팩토리얼 : %d\n", fact_num);
	return 0;
}

int factorial(int n)
{
	if (n <= 1)
		return 1;
	else
		return n * factorial(n - 1);
}
-> ㅇ
