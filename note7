01. 포인터의 기본
-> 포인터는 변수의 주소값을 가리키는데 사용된다. 예를들어 int a = 10이 있을 떄, a의 주소가 100번지 라고 할 때, 기존의 경우 int b = a라고 하면 a의 값을 가리키는 것이었다.
   즉 b를 출력하고자 하면 b = a = 10, a의 변수값 10이 출력되는 식이다.
   그런데 포인터를 이용하면 포인터 b = a라고 하면 이때 b는 a의 주소 즉 100번지에 있는 값 10을 찾아서 출력하는 것이다.

-> 포인터의 선언방법
  : 자료형* 변수명
  예). int* ptr
-> * 연산자가 하나이면 1차원 포인터를 의미한다.
-> 1차원 포인터는 일반 변수의 주소를 값으로 가진다.

-> 포인터의 예
  : int i = 3;
    int* ptr = &i; 
-> 일반 변수의 주소는 &를 이용하여 표현한다.

-> 포인터의 변수의 크기는 char, int, double 등의 변수의 크기와 관계없이 4바이트로 일정하다.
-> 참고로 배열은 포인터 상수이다.

-> 예제 10-1. 포인터의 기본
#include <stdio.h>

int main(void)
{
	int i = 10;
	int* ptr = &i;

	printf("ptr의 주소 값 : %p\n", &ptr);  //ptr의 주소의 값이 출력된다.
	printf("i의 주소 값 : %p\n", &i);        // i의 주소의 값이 출력된다.
	printf("i의 주소값 : %p\n", ptr);       // ptr이 가리키는 i의 주소의 값이 출력된다.

	printf("i의 값 : %d\n", i);               // i의 값 10이 출력된다.
	printf("i의 값 : %d\n", *ptr);         // ptr이 가리키는 i의 주소에 있는 값 10이 출력된다.
	return 0;
}

-> 포인터를 이용한 연산 
  : 포인터를 이용하여 포인터가 가리키는 곳의 값을 바꾸거나 연산도 가능하다.
  예). int i = 3
       int *p = &i
       *p = i + 5 
      => i의 값이 8로 바뀌게 된다.

-> 예제 10-2. 포인터를 이용한 연산
#include <stdio.h>

int main(void)
{
	int i = 10;
	int* ptr = &i;

	*ptr = i + 20;                         // i의 주소를 가리키는 곳에 20을 더한다.(i = 30)
	printf("i의 값 : %d\n", i);        // i의 값 30이 출력된다.

	i = i + 20;                             // i의 값에 20을 더한다.(i = 50)
	printf("i의 값 : %d\n", *ptr);  // i주소에 있는 값 50이 출력된다.
	return 0;
}

-> 예제 10-3. 포인터를 이용하지 않고 두 수 바꾸기
